  class Panel {
  constructor(width, savecode) {
  const that = this
  const Width = width
  this.active = false
  this.body = document.createElement("div")
  this.transperent = document.createElement("canvas")
  this.colors = document.createElement("div")
  that.colors.style.position = "fixed"
  that.body.append(that.colors)
  this.body.style.width = width*2 + "px"
  this.body.style.height = window.innerHeight + "px"
  this.body.className = "panelBody"
  this.body.style.maginTop = "-2px"
  this.body.style.position = "fixed"
  this.body.style.border = "2px solid"
  this.body.style.overflow = "hidden"
  this.body.style.backgroundColor = "rgba(255, 255, 255, 0.35)"
  this.body.addResizeMap(function(e) {
      e.style.borderRadius = Width + "px/" + innerHeight /2 + "px"
      e.style.marginLeft = innerWidth - Width + "px"
      e.style.height = innerHeight + "px"
      that.transperent.height = innerHeight
      that.colors.style.marginLeft = Width -55 + "px"
      that.colors.style.marginTop = innerHeight/Width * 20 + "px"
      that.update()
    })
  this.body.ondblclick=function() { 
      var data = canvas.getColor(true)
      navigator.clipboard.writeText(data)
      .then(() => {
       mess("active color coppied!")
       })
      .catch(err => {
      mess("failed to copy color: Browser don't support clipboard")
       })
   }
  this.transperent.height = innerHeight
  this.transperent.width = 20
  this.transperent.style.border = "1px dotted"
  this.transperent.style.marginLeft = Width - 25 + "px"
  that.body.append(this.transperent)
  this.t = 0
   this.start = function() {
    if(!that.active) {
     that.active = that.transperent.getContext("2d")
     }
  };
  
 this.move = function(y) {
   if(panel.active) {
    var ctx = panel.active
    ctx.fillStyle = canvas.getColor()
    ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height)
    ctx.clearRect(0,0,ctx.canvas.width,y)
    that.t = y
    var a = eval( (1 - that.t/innerHeight).toFixed(panel_alpha_width) )
     if(a > 1) { a = 1 }
     canvas.color[3] = a; canvas.canvas.getContext("2d").globalAlpha=a
     mess("Alpha " + a)
     }
   that.body.style.borderColor=canvas.getColor(); executor.changeBackground()
  };
 
 this.end = function() { if(panel.active) { that.active=false } };
 
 this.update = function() {
   that.t = (1-canvas.color[3]) * innerHeight
   var ctx = that.transperent.getContext("2d")
   ctx.fillStyle = canvas.getColor()
   ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height)
   ctx.clearRect(0,0,ctx.canvas.width,panel.t - innerHeight/20)
   that.body.style.borderColor=ctx.fillStyle
   if(tools.mode.active) { tools.mode.switch(0) }; executor.changeBackground()
    }
  this.transperent.addListener(that.start, function(e) { e=executor.handle(e); that.move(e.y) }, that.end);

  this.code = savecode
  this.colorEditor = {
    edit: function(rgb) {
     var c = []
     var i = 0; // start edit
     for(i = i; i < rgb.length; i++) { if(rgb[i] == "(") { break } }
     var f = ""
     for(i = i+1; i < rgb.length; i++) {
      if(rgb[i] != ")") {
       if(rgb[i] == ",") { c.push( eval(f) ); f = "" } else { f += rgb[i] }
             } else { break }
           } 
         c.push( eval( f )); return c
      },
    stroke: function() {
     var colors = []
     var i = 0
      for(i = i; localStorage.getItem(that.code + i) != null; i++) {
       var id = localStorage.getItem(that.code + i)
        if(id != "" && id != null) {
          var d = document.createElement("div")
          d.className="toog"
          d.style.backgroundColor = id
          d.id="t" + i
          d.onclick=function(e) {
           if(!e.altKey && !executor.alt) {
              that.colorEditor.vote(this)
               } else { that.colorEditor.delete(this) }
             }
         colors.push(d)
           }
         }
        return colors
      },
    save: function() {
     var color = canvas.getColor(true)
     var id = that.colorEditor.stroke().length
     localStorage.setItem(that.code + id, color)
     that.strokeColors()
      },
    delete: function(element) {
     var id = onlyNumbers(element.id)
     localStorage.setItem(that.code + id, "")
     that.strokeColors()
      },
    vote: function(element) {
     var id = onlyNumbers( element.id )
     var color = localStorage.getItem(that.code + id);
     canvas.color = that.colorEditor.edit(color)
     that.update()
       }
    }
  this.strokeColors = function() {
    that.colors.innerHTML = ""
    var elements = that.colorEditor.stroke()
    for(var i = 0; i < elements.length; i++) {
    that.colors.append(elements[i])
      }
    };
  }
}